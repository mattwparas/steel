(define (any-eq? actual expected)
  (cond
    [(null? expected) #f]
    [(equal? actual (car expected)) #t]
    [else (any-eq? actual (cdr expected))]))

(define (assert-any! actual expected)
  (unless (any-eq? actual expected)
    (if (= (length expected) 1)
        (error "expected" (car expected) "but got" actual)
        (error "expected any of" expected "but got" actual))))

(define (assert-output! func val expected)
  (let ([port (open-output-string)])
    (func val port)
    (assert-any! (get-output-string port) expected)))

(define (assert-print! val . expected)
  (assert-output! print val expected))

(define (assert-display! val . expected)
  (assert-output! display val expected))

(struct printer (x y) #:printer (Î» (obj printer) (printer "hello world")))
(struct trans (x y) #:transparent)

(assert-print! 1 "1")
(assert-print! 1.0 "1.0")
(assert-print! 1.5 "1.5")
(assert-print! 1/2 "1/2")
(assert-print! #\x "#\\x")
(assert-print! "hello" "\"hello\"")
(assert-print! '|pea pod| "'|pea pod|")
(assert-print! '|one \| two| "'|one \\| two|")
(assert-print! '("i" pod) "'(\"i\" pod)")
(assert-print! list "#<function:list>")
(assert-print! (list 1 2 3) "'(1 2 3)")
(assert-print! #\space "#\\space")
(assert-print! 'test "'test")
(assert-print! (cons #\a #\space) "'(#\\a . #\\space)")
(assert-print! (cons 1 (cons "two" (cons 'three #\4))) "'(1 \"two\" three . #\\4)")
(assert-print! (cons 1 (cons (list 2) 3)) "'(1 (2) . 3)")
(assert-print! (hashset 1) "(set 1)")
(assert-print! (hashset) "(set)")
(assert-print! (vector 1 #\space 2) "'#(1 #\\space 2)")
(assert-print! (hash "one" 1 'two 2) "'#hash((\"one\" . 1) (two . 2))" "'#hash((two . 2) (\"one\" . 1))")
(assert-print! (hash 'two 2) "'#hash((two . 2))")
(assert-print! (cons 'one (cons "two\"" void)) "'(one \"two\\\"\" . #<void>)")
(assert-print! (printer 2 2) "\"hello world\"")
(assert-print! (trans 2 2) "(trans 2 2)")

(assert-display! 1 "1")
(assert-display! 1.0 "1.0")
(assert-display! 1.5 "1.5")
(assert-display! 1/2 "1/2")
(assert-display! #\x "x")
(assert-display! "hello" "hello")
(assert-display! '|pea pod| "pea pod")
(assert-display! '|one \| two| "one | two")
(assert-display! '("i" pod) "(i pod)")
(assert-display! list "#<function:list>")
(assert-display! (list 1 2 3) "(1 2 3)")
(assert-display! #\space " ")
(assert-display! 'test "test")
(assert-display! (cons #\a #\space) "(a .  )")
(assert-display! (cons 1 (cons "two" (cons 'three #\4))) "(1 two three . 4)")
(assert-display! (cons 1 (cons (list 2) 3)) "(1 (2) . 3)")
(assert-display! (hashset 1 2 1) "(set 1 2)" "(set 2 1)")
(assert-display! (hashset) "(set)")
(assert-display! (vector 1 #\space 2) "#(1   2)")
(assert-display! (hash "one" 1 'two 2) "#hash((one . 1) (two . 2))" "#hash((two . 2) (one . 1))")
(assert-display! (cons 'one (cons "two\"" void)) "(one two\" . #<void>)")
(assert-display! (printer 2 2) "hello world")
(assert-display! (trans 2 2) "(trans 2 2)")
