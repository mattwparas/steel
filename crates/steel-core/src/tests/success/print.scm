(define (assert-equal! expected actual)
  (let ([ok (equal? expected actual)])
    (when (not ok)
      (error "expected" expected "but got" actual))))

(define (assert-output! func val expected)
  (let ([port (open-output-string)])
    (func val port)
    (assert-equal! expected (get-output-string port))))

(define (assert-print! val expected)
  (assert-output! print val expected))

(define (assert-display! val expected)
  (assert-output! display val expected))

(struct printer (x y) #:printer (Î» (obj printer) (printer "hello world")))
(struct trans (x y) #:transparent)

(assert-print! 1/2 "1/2")
(assert-print! #\x "#\\x")
(assert-print! "hello" "\"hello\"")
; (assert-print! '|pea pod| "'|pea pod|")
(assert-print! '("i" pod) "'(\"i\" pod)")
(assert-print! list "#<function:list>")
(assert-print! (list 1 2 3) "'(1 2 3)")
(assert-print! #\space "#\\space")
(assert-print! 'test "'test")
(assert-print! (cons #\a #\space) "'(#\\a . #\\space)")
(assert-print! (hashset 1) "(set 1)")
(assert-print! (hashset) "(set)")
(assert-print! (vector 1 #\space 2) "'#(1 #\\space 2)")
(assert-print! (hash "one" 1) "'#hash((\"one\" . 1))")
(assert-print! (hash 'two 2) "'#hash((two . 2))")
(assert-print! (cons 'one (cons "two\"" void)) "'(one . (\"two\\\"\" . #<void>))")
(assert-print! (printer 2 2) "\"hello world\"")
(assert-print! (trans 2 2) "(trans 2 2)")

(assert-display! 1/2 "1/2")
(assert-display! #\x "x")
(assert-display! "hello" "hello")
(assert-display! '|pea pod| "pea pod")
; (assert-display! '("i" pod) "(i pod)")
(assert-display! list "#<function:list>")
(assert-display! (list 1 2 3) "(1 2 3)")
(assert-display! #\space " ")
(assert-display! 'test "test")
(assert-display! (cons #\a #\space) "(a .  )")
(assert-display! (hashset 1) "(set 1)")
(assert-display! (hashset) "(set)")
; (assert-display! (vector 1 #\space 2) "#(1   2)")
; (assert-display! (hash "one" 1) "#hash((one . 1))")
; (assert-display! (hash 'two 2) "#hash((two . 2))")
(assert-display! (cons 'one (cons "two\"" void)) "(one . (two\" . #<void>))")
; (assert-display! (printer 2 2) "hello world")
(assert-display! (trans 2 2) "(trans 2 2)")
